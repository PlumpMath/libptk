#pragma once

/*
 * The PSoC USB driver depends on code that has been generated by Cypress' IDE,
 * PSoC Creator. Since the function names in the generated API depend on what
 * the IDE user named the instance of the USBFS component, it's not possible to
 * write generic code that will work in all PSoC Creator designs. The comporomise 
 * taken here is to require that the preprocessor macro _USB_NAME_ be defined as
 * the name of the USBFS instance. This definition can be placed in a Makefile,
 * or in source code that's processed before this file.
 */

#if defined(_USB_NAME_)
#include "ptk/io.h"

extern "C" {
  void usbfs_endpoint_isr(int ep);
  void usbfs_reset_isr();
}

// Declarations

namespace ptk {
  namespace psoc {
    uint8_t get_usb_cdc_input_endpoint();
    uint8_t get_usb_cdc_output_endpoint();
    void init_usb_driver();
    void init_cdc_driver();
    bool usb_is_enumerated();

    struct PSoCUSBEndpoint : public USBEndpoint {
      volatile uint8_t *get_output_data_ptr();
      size_t get_max_buffer_size();
      size_t get_bytes_in_endpoint();
      size_t read_output_data(uint8_t *dst, size_t len);

      static void init_usb_device();
      static void init_cdc();
      static bool is_enumerated();
    };

    class PSoCUSBInStream : public PSoCUSBEndpoint, public DeviceInStream {
      uint8_t fifo_storage[16];
      virtual void transfer() override;

    public:
      PSoCUSBInStream();
      void init(uint8_t ep);
    };

    class PSoCUSBOutStream : public PSoCUSBEndpoint, public DeviceOutStream {
      uint8_t fifo_storage[128];
      virtual void transfer() override;

    public:
      PSoCUSBOutStream();
      virtual unsigned write(const uint8_t *buffer, unsigned len);
    };

    struct CDCDriver {
      PSoCUSBInStream in;
      PSoCUSBOutStream out;

      void init();
      bool is_enumerated();
      void init_cdc();
    };

    class PSoCEcho : public Thread {
      PSoCUSBInStream rx;
      PSoCUSBOutStream tx;
      EchoThread echo;

    public:
      PSoCEcho();
      virtual void run();
    };

#if 0
    class USBEcho : public ptk::Thread {
    public:
      PSoCUSBInStream rx;
      PSoCUSBOutStream tx;

      USBEcho();
      virtual void run();
    };

    extern USBEcho usb_echo;
#endif
  }
}

#endif // defined(_USB_NAME_)
